Install cpan module
----------------------------------------------------------------------
sudo cpanm enum

One liners
----------------------------------------------------------------------
Ascii generator
perl -e 'foreach $n (32..126){printf(" 0x%x %s\n", $n, chr($n))}'

perl -e 'use Config; print "$Config{archlib}\n";'


Perl blog:
----------------------------------------------------------------------
There is an a2p script, you can download it like this.
sudo apt install cpanminus
cpanm App::a2p

perl has a $_ variable, so you can write

if (/pattern/) this will match the pattern against the $_ variable

<> reads stdin
while (<>) {
    print
}


Parenthesis are optional for functions but I am not goint to do 
that
print("Hello, world\n");
print "Hello, world\n";


my is somewhat like static in c, I like the short name

\ is somewhat like & in c
char a;
char* b = &a

my $animal = "camel";
aref = \$animal

variables need to have a sigil infront of them $,@,%
special vairable $_

The reason for unreadability is because it has arrays with names such as
@_ @+ @-, When the arrays are accessed $-[0] $+[0] etc

Using "DATA" file handle
----------------------------------------------------------------------

while (my $date_string = <DATA>) {
  chomp($date_string);
  next if not length $date_string;
  print "$date_string ist Unixtime ",
        $lang_date->str2time($date_string),
        " und ",
    $lang_date->time2str( '%d.%m.%Y %T (%Z)',$lang_date->str2time($date_string) ),
        "\n";
}

__DATA__
1.3.1999
1 Marz 1999
1. Marz 1999
1/3/1999



get the first line
    $msg = <DATA>;

If $/ is undef: read all the lines, reads whole file. 
If it is '', reads one paragraph
    do { 
        local $/;
        $msg = <DATA>
    };


basic
----------------------------------------------------------------------
print with new line
    print ($s, "\n")

variables need to have a sigil in front of them.
scalar variable
    $foo = 12
array variable
    @foo = (1 2 3)
hash variable
    %foo = ('Mon', 65, 'Tue', 68, 'Thu, 43)

special variable $_
    @teams = ('cubs', 'reds', 'yankees', 'dodgers');
    foreach (@teams) {
      print "$_\n";
    }


string 
----------------------------------------------------------------------
unpack
    # get a 5-byte string, skip 3, then grab 2 8-byte strings, then the rest
    ($leading, $s1, $s2, $trailing) =
        unpack("A5 x3 A8 A8 A*", $data);

substr
    $value = substr($string, $offset, $count);

index
    $offset = index($str, 'needle')

hash
----------------------------------------------------------------------
# Assignment
my %hash; # empty hash
my %weekly_temperature = ('monday', 65, 'tuesday', 68, 'wednesday', 71, 'thursday', 53, 'friday', 60);
# using "fat comma" operator 
my %weekly_temperature = (
    monday    => 65, 
    tuesday   => 68,
    wednesday => 71, 
    thursday  => 53, 
    friday    => 60,
    );

# access value
my $monday_temp = $weekly_temperature{monday};

#slice
my ($tuesday_temp, $friday_temp) = @weekly_temperature{('tuesday', 'friday')};

# access all values
foreach my $value (values %weekly_temperature){
   print $value . "\n";
}

# Access all keys
foreach my $grade (keys %consultant_salaries) {
    print "$grade: $consultant_salaries{$grade}\n";
}

# Access all key-value pairs
while (my ($key, $value) = each %consultant_salaries) {
    print "$key: $value\n";
}

# Add new key-value pair, Update value of a pair
$fruit_pairs{oranges} = 'lemons';

# Delete
delete $fruit_pairs{apples};

# Empty a hash
%fruit_pairs = ();

# size
my $count =  keys %common_word_count;
print "$count\n";


array
----------------------------------------------------------------------
print array
    print "@array\n"            # space separated
    print join(", ", @array);   # comma separated

    $" = "\n"
    print "@array\n"            # new-line separated

loop
    my @a = (1,2,3);
    for my $i(@a) {
        print "$i\n";
    }

    fo (@a) {
        print $_ . "\n";
    }

operations
    push(@array, element)      # add element or elements into the end of the array
    $popped = pop(@array)      # delete and return the last element of the array
    $shifted = shift(@array)   # delete and return the first element of the array
    unshift(@array)            # add element or elements into the beginning of the array
    scalar (@array)            # length



regex
----------------------------------------------------------------------
match operators
    $foo =~ m/this|that/

match at boundry only
    $foo =~ m/\b(fee|fie|foe|fum)\b/
    $foo =~ m/\b{wb}(fee|fie|foe|fum)\b{wb}/

look ahead assertion ?=
    /\w+(?=\t)/         # matches a word followed by a tab and tab is not consumed
    /foo(?!bar)/        # matches foo that is not followed by bar
look behind assertion ?<=
    /(?<=\t)\w+/        # match word that follows a tab

multiple matches and pos
    $x = "cat dog house"; # 3 words
    while ($x =~ /(\w+)/g) {
        print "Word is $1, ends at position ", pos $x, "\n";
    }

search and replace
    $x = "I batted 4 for 4";
    $x =~ s/4/four/;   # $x contains "I batted four for 4"

split
    @word = split /\s+/, $x;

Named backreference
    (?<name>...) or (?'name'...)

Alternative capture group numbering
    (?|...)

Non-capturing group
    (?:regexp)
    or /n flag: "hello" =~ /(hi|hello)/n; # $1 is not set!

Positive lookahead assertion
    (?=pattern)
    Note: "^" and "$" are also assertions

Matching multiple regex
    for ($data) {
        if (/regex/ && /secondregex/) {...}
    }

    use 5.010;
    if ($data ~~ [qr/regex1/,qr/regex2/]) { ... }

smartmatch
    say "red in array" if "red" ~~  @array;


    




subroutines
----------------------------------------------------------------------
Load subroutines from other files
    use, require, do

sub max {
    my $max = shift(@_);
    foreach $foo (@_) {
        $max = $foo if $max < $foo;
    }
    return $max;
}

Ways of passing parameters to subroutines
sub shifty {
    my $foo = shift;
}

sub listy {
    my ($foo) = @_;
}

sub fancy_listy {
    my ($positional, $args, @bad) = @_;
    die "Extra args" if @bad;
}

sub named_params {
    my %opt = @_;
}

sub named_params {
    my %opt = @_;
    my $named = delete $opt{named} // "default value";
    my $param = delete $opt{param}
        or croak "Missing required 'param'";
    croak "Unknown params:", join ", ", keys %opt
        if %opt;
    # do stuff 
}


switch case
----------------------------------------------------------------------
use 5.010; 
no warnings 'experimental';

given ($day_code)  
{   
    when ('0') { print 'Sunday' ;}   
    when ('1') { print 'Monday' ;}   
    default { print 'Invalid day-code';}   
}   



Call C from perl
----------------------------------------------------------------------
1. Write your C library
# example.c
int sum (int a, int b) {
    return a+b;
}

# example.h
extern int sum(int a, int b);


2. Make example.i and Makefile.PL as follows
# example.i
%module example
%{
#include "example.h"
%}
%include "example.h"

# Makefile.PL
use ExtUtils::MakeMaker;
WriteMakefile(
    "NAME"    => "example",                  # Name of package
    "OBJECT"  => "example.o example_wrap.o"  # Object files
);

3. execute
swig -perl example.i
perl Makefile.PL


4. Test
# test.pl
use lib qw(/home/aawais/swig);
use example;
$s = example::sum(10,20);
print "$s\n";



swig -perl example.i
gcc -fpic -c example.c
gcc -fpic -c example_wrap.c -I/usr/lib/x86_64-linux-gnu/perl/5.30/CORE -Doff64_t=__off64_t
gcc -shared example.o example_wrap.o -o example.so

