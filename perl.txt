Basic scripts
----------------------------------------------------------------------
#!/usr/bin/perl
use warnings;
print("Hello, World!\n");


#!/usr/bin/perl
use warnings;
use strict;
use Data::Dumper qw(Dumper);
print Dumper \@ARGV;  # if you leave out the "\" it will print each array element as a
                      # separate variable


Using command line args
----------------------------------------------------------------------
#!/usr/bin/perl -w

$num_args = $#ARGV + 1;
if ($num_args != 2) {
    print "\nUsage: name.pl first_name last_name\n";
    exit;
}
$first_name=$ARGV[0];
$last_name=$ARGV[1];
print "Hello, $first_name $last_name\n";




Install cpan module
----------------------------------------------------------------------
sudo cpanm enum


One liners
----------------------------------------------------------------------
Ascii generator
perl -e 'foreach $n (32..126){printf(" 0x%x %s\n", $n, chr($n))}'

perl -e 'use Config; print "$Config{archlib}\n";'


Perl blog:
----------------------------------------------------------------------
There is an a2p script, you can download it like this.
sudo apt install cpanminus
cpanm App::a2p

perl has a $_ variable, so you can write

if (/pattern/) this will match the pattern against the $_ variable

<> reads stdin
while (<>) {
    print
}


Parenthesis are optional for functions 
print("Hello, world\n");
print "Hello, world\n";


my is somewhat like static in c, I like the short name

\ is somewhat like & in c
char a;
char* b = &a

my $animal = "camel";
aref = \$animal

variables need to have a sigil infront of them $,@,%
special vairable $_

The reason for unreadability is because it has arrays with names such as
@_ @+ @-, When the arrays are accessed $-[0] $+[0] etc

Using "DATA" file handle
----------------------------------------------------------------------

while (my $date_string = <DATA>) {
  chomp($date_string);
  next if not length $date_string;
  print "$date_string ist Unixtime ",
        $lang_date->str2time($date_string),
        " und ",
    $lang_date->time2str( '%d.%m.%Y %T (%Z)',$lang_date->str2time($date_string) ),
        "\n";
}

__DATA__
1.3.1999
1 Marz 1999
1. Marz 1999
1/3/1999



get the first line
    $msg = <DATA>;

If $/ is undef: read all the lines, reads whole file. 
If it is '', reads one paragraph
    do { 
        local $/;
        $msg = <DATA>
    };


basic
----------------------------------------------------------------------
print with new line
    print ($s, "\n")

variables need to have a sigil in front of them.
$foo = 12                                   scalar variable
@foo = (1,2,3)                              array variable
%foo = ('Mon', 65, 'Tue', 68, 'Thu, 43)     hash variable

special variable '$_'
    @teams = ('cubs', 'reds', 'yankees', 'dodgers');
    foreach (@teams) {
      print "$_\n";
    }


string 
----------------------------------------------------------------------
unpack
    # get a 5-byte string, skip 3, then grab 2 8-byte strings, then the rest
    ($leading, $s1, $s2, $trailing) =
        unpack("A5 x3 A8 A8 A*", $data);

substr
    $value = substr($string, $offset, $count);

index
    $offset = index($str, 'needle')

hash
----------------------------------------------------------------------
# Assignment
my %hash; # empty hash
my %weekly_temperature = ('monday', 65, 'tuesday', 68, 'wednesday', 71, 'thursday', 53, 'friday', 60);
# using "fat comma" operator 
my %weekly_temperature = (
    monday    => 65, 
    tuesday   => 68,
    wednesday => 71, 
    thursday  => 53, 
    friday    => 60,
    );

# access value
my $monday_temp = $weekly_temperature{monday};

# slice
my ($tuesday_temp, $friday_temp) = @weekly_temperature{('tuesday', 'friday')};

# access all values
foreach my $value (values %weekly_temperature){
   print $value . "\n";
}

# Access all keys
foreach my $grade (keys %consultant_salaries) {
    print "$grade: $consultant_salaries{$grade}\n";
}

# Access all key-value pairs
while (my ($key, $value) = each %consultant_salaries) {
    print "$key: $value\n";
}

# Add new key-value pair, Update value of a pair
$fruit_pairs{oranges} = 'lemons';

# Delete
delete $fruit_pairs{apples};

# Empty a hash
%fruit_pairs = ();

# size
my $count =  keys %common_word_count;
print "$count\n";


array
----------------------------------------------------------------------
print array
    print "@array\n"            # space separated
    print join(", ", @array);   # comma separated

    $" = "\n"
    print "@array\n"            # new-line separated

loop
    my @a = (1,2,3);
    for my $i(@a) {
        print "$i\n";
    }

    for (@a) {
        print $_ . "\n";
    }

operations
    push(@array, element)        # add element or elements into the end of the array
    $popped = pop(@array)        # delete and return the last element of the array
    $shifted = shift(@array)     # delete and return the first element of the array
    unshift(@array, "new_entry") # add element or elements into the beginning of the array
    scalar (@array)              # length
    $#array                      # last index (length-1)



regex
----------------------------------------------------------------------
match operators
    $foo =~ m/this|that/

match at boundry only
    $foo =~ m/\b(fee|fie|foe|fum)\b/
    $foo =~ m/\b{wb}(fee|fie|foe|fum)\b{wb}/

look ahead assertion ?=
    /\w+(?=\t)/         # matches a word followed by a tab and tab is not consumed
    /foo(?!bar)/        # matches foo that is not followed by bar
look behind assertion ?<=
    /(?<=\t)\w+/        # match word that follows a tab

multiple matches and pos
    $x = "cat dog house"; # 3 words
    while ($x =~ /(\w+)/g) {
        print "Word is $1, ends at position ", pos $x, "\n";
    }

search and replace
    $x = "I batted 4 for 4";
    $x =~ s/4/four/;   # $x contains "I batted four for 4"

split
    @word = split /\s+/, $x;

Named backreference
    (?<name>...) or (?'name'...)

Alternative capture group numbering
    (?|...)

Non-capturing group
    (?:regexp)
    or /n flag: "hello" =~ /(hi|hello)/n; # $1 is not set!

Positive lookahead assertion
    (?=pattern)
    Note: "^" and "$" are also assertions

Matching multiple regex
    for ($data) {
        if (/regex/ && /secondregex/) {...}
    }

    use 5.010;
    if ($data ~~ [qr/regex1/,qr/regex2/]) { ... }

smartmatch
    say "red in array" if "red" ~~  @array;


    




subroutines
----------------------------------------------------------------------
Load subroutines from other files
    use, require, do

sub max {
    my $max = shift(@_);
    foreach $foo (@_) {
        $max = $foo if $max < $foo;
    }
    return $max;
}

Ways of passing parameters to subroutines
sub shifty {
    my $foo = shift;
}

sub listy {
    my ($foo) = @_;
}

sub fancy_listy {
    my ($positional, $args, @bad) = @_;
    die "Extra args" if @bad;
}

sub named_params {
    my %opt = @_;
}

sub named_params {
    my %opt = @_;
    my $named = delete $opt{named} // "default value";
    my $param = delete $opt{param}
        or croak "Missing required 'param'";
    croak "Unknown params:", join ", ", keys %opt
        if %opt;
    # do stuff 
}


switch case
----------------------------------------------------------------------
use 5.010; 
no warnings 'experimental';

given ($day_code)  
{   
    when ('0') { print 'Sunday' ;}   
    when ('1') { print 'Monday' ;}   
    default { print 'Invalid day-code';}   
}   



Call C from perl
----------------------------------------------------------------------
1. Write your C library
# example.c
int sum (int a, int b) {
    return a+b;
}

# example.h
extern int sum(int a, int b);


2. Make example.i and Makefile.PL as follows
# example.i
%module example
%{
#include "example.h"
%}
%include "example.h"

# Makefile.PL
use ExtUtils::MakeMaker;
WriteMakefile(
    "NAME"    => "example",                  # Name of package
    "OBJECT"  => "example.o example_wrap.o"  # Object files
);

3. execute
swig -perl example.i
perl Makefile.PL


4. Test
# test.pl
use lib qw(/home/aawais/swig);
use example;
$s = example::sum(10,20);
print "$s\n";



swig -perl example.i
gcc -fpic -c example.c
gcc -fpic -c example_wrap.c -I/usr/lib/x86_64-linux-gnu/perl/5.30/CORE -Doff64_t=__off64_t
gcc -shared example.o example_wrap.o -o example.so



Online Documentation
----------------------------------------------------------------------
Perl functions by Category
    https://perldoc.perl.org/functions
SWIG and Perl5
    https://www.swig.org/Doc1.3/Perl5.html


pack / unpack
----------------------------------------------------------------------
my $t = pack( 'H2H2H2H2H2H2H2H2H2H2', 30,31,32,33,34,35,36,37,38,39 );
this is compact form of above
my $s = pack( 'H2' x 10, 30..39 );


Special Variables
----------------------------------------------------------------------
perldoc: special variables 


Read File
----------------------------------------------------------------------
my $filename = 'c:\temp\test.txt';
open(FH, '<', $filename) or die $!;
while(<FH>){
   print $_;
}
close(FH);

Entire file
undef $/;
data = <FH>;


Dump
----------------------------------------------------------------------
use Data::HexDump;
print HexDump($pkt);

use Data::Dumper;
warn Dumper $npe;


Encode a UDP packet
----------------------------------------------------------------------
use NetPacket::UDP;
use NetPacket::IP;
use NetPacket::Ethernet qw(:strip);

my $pkt; # <--- raw packet including ethernet header
my $ip_obj = NetPacket::IP->decode(eth_strip($pkt));
print("aw> $ip_obj->{src_ip} --> $ip_obj->{dest_ip} proto:$ip_obj->{proto}\n");
my $udp_obj = NetPacket::UDP->decode($ip_obj->{data});
print "aw> sport:$udp_obj->{src_port} dport:$udp_obj->{dest_port}\n";



Manually craft an IP packet with ethernet header included
----------------------------------------------------------------------

# Ethernet Header data
my $w1 = 0x45000000 | ($len + 20+8);
my $w2 = 0;
my $w3 = 0x0F110000;

# IP Header data
my $sa = Net::IPAddress::ip2num ($ip->{src_ip}) ;
my $da = Net::IPAddress::ip2num ($ip->{dest_ip}) ;
my @iphdr_struct = ($w1,$w2,$w3, $sa,$da);

# UDP Header data
my @udphdr_struct = ($udp->{src_port}, $udp->{dest_port}, $len+8, 0);

# Assemble packet
my $udp_pkt = pack("H12 H12 H4 N5 n4 A*",
    $ether->{dest_mac},
    $ether->{src_mac},
    "0800",
    @iphdr_struct,
    @udphdr_struct,
    $data);
$len += (14+20+8);
ctdc::pan_ctd_rcv_data($sess, $udp_pkt, \$len);




C and perl
----------------------------------------------------------------------
EXTERN.h is located at /usr/lib/x86_64-linux-gnu/perl/5.30/CORE

cd /usr/lib/x86_64-linux-gnu
ln -s libperl.so.5.30.0 libperl.so





Debugger
----------------------------------------------------------------------
perl -d <script>
perl -d:ptkdb <script>                      debug using the Devel::ptkdb GUI
perl -dt <threaded_program_name>

p   print
x   recursive print
T   backtrace
s   single step
n   next
c [line|sub]  
    continue, or continue to line or subroutine
l   List
b [line][condition]   
    breakpoint
B line  
    delete breakpoint
enable [line]
disable [line]
w expr      watch
q           quit
M           display all loaded modules and their versions
!17         repeat command number 17
