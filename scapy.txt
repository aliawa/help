# -------------------------------
# Operations on list of packets:
# -------------------------------

Command             Effect
----------          ----------------------------------------------------
summary()           displays a list of summaries of each packet
nsummary()          same as previous, with the packet number
conversations()     displays a graph of conversations
show()              displays the prefered representation (usually nsummary())
filter()            returns a packet list filtered with a lambda function
hexdump()           returns a hexdump of all packets
hexraw()            returns a hexdump of the Raw layer of all packets
padding()           returns a hexdump of packets with padding
nzpadding()         returns a hexdump of packets with non-zero padding
plot()              plots a lambda function applied to the packet list
make table()        displays a table according to a lambda function

# Format summary
ans.summary( lambda(s,r): r.sprintf("%TCP.sport% \t %TCP.flags%") )




# -------------------------------
# Operations on single packet
# -------------------------------
#
# Create packet
pkt=IP()/TCP()/"GET / HTTP/1.0\r\n\r\n"

# See packet
pkt.show()
ls(pkt)
hexdump(pkt)
pkt.summary()

# convert packet to hex string
str(pkt) 

# packet fields
pkt[IP].src
pkt[UDP].dport
pkt[TFTP_DATA].block
pkt[Raw].load
pkt[ICMP].type
pkt[ICMP].code

# Check presense of layer
if IP in pkt
if TFTP_DATA in pkt

# layer summary
pkt[ICMP].summary()
pkt[TFTP_ERROR].summary()

# recreate a sniffed packet
pkt.command()   # return Scapy command that can generate 'pkt'
newpkt = eval(pkt.command())
or newpkt = pkt






# -------------------------------
# sending and receiving
# -------------------------------

# Sending and Receiving
# "ans" is list of couples (packet sent, packet received)
# "unans" is ist of unreplied packet
ans,unans=sr(IP(dst="www.test.fr/30", ttl=(1,6))/TCP())

# Send and receive single packet
p=sr1(IP(dst="www.slashdot.org")/ICMP()/"XXXXXXXXXXX")


# Send packet layer 3: meanining it will using the kernel routing table to
# select the correct interface and next Layer 2 hop.
send(IP(dst="1.2.3.4")/ICMP())


# Send packet layer 2: meaning we will have to choose the correct interface
# and link layer protocol (for example Ether)
sendp(Ether()/IP(dst="1.2.3.4",ttl=(1,4)), iface="eth1")

# Send the same set of packets in a loop (send SYN to port 80)
srloop(IP(dst="www.target.com/30")/TCP())


# Sending TCP
# Dont let the kernel on local-machine see the syn-ack from target
# otherwise it will respond with a RST
iptables -A INPUT -s <target> -j DROP




# -------------------------------
# sniff
# -------------------------------

# Sniff
pkts=sniff(iface="eth1", filter="port sip")
pkts.nsummary()

# Details of third packet
pkts[3]

# Using Berkley Packet Filter (BPF)
sniff(iface="eth0", filter="icmp", count=10)

# Sniff and show, prn function to be called for each packet not necessarily print
sniff(iface="eth1", prn=lambda x: x.show())

# print using sprintf
pkts = sniff(prn=lambda x:x.sprintf("{IP:%IP.src% -> %IP.dst%\n}{Raw:%Raw.load%\n}"))


# -------------------------------
# pcap 
# -------------------------------

# Read pcap file
pkts = rdpcap("/tmp/read1.pcap")

# Write the captured packtes to a pcap files
wrpcap("/tmp/write1.pcap",pkts)

# Show captured packets in wireshark
wireshark(a)

# Replay packets
pkts=rdpcap(“/tmp/attack.pcap”)
for pkt in pkts:
   send(pkt)


# -------------------------------
# Routing
# -------------------------------

# Show internal routing table
conf.route

# delete route
conf.route.delt(net="0.0.0.0/0",gw="192.168.8.1")

# Add route to net
conf.route.add(net="0.0.0.0/0",gw="192.168.8.254")

# Add route to host
conf.route.add(host="192.168.1.1",gw="192.168.8.1")

# Reload system routing table, Overwrite local changes)
conf.route.resync()



# -------------------------------
# Getting information
# -------------------------------

# all available protocols (or layers)
ls()

# all available protocol fields
ls(ARP)

# all scapy commands
lsc()

# get function parameters
import inspect
inspect.getargspec(srflood)

# function help
help(srflood)


# -------------------------------
# BPF (Berkeley Packet Filter)
# -------------------------------

http://biot.com/capstats/bpf.html



# -------------------------------
# Custom DNS responder
# -------------------------------
from scapy.all import *
 
DNSServerIP = "172.16.20.40"
filter = "udp port 53 and ip dst " + DNSServerIP + " and not ip src " + DNSServerIP
 
def DNS_Responder(localIP):
 
    def forwardDNS(orig_pkt):
        print "Forwarding: " + orig_pkt[DNSQR].qname
        response = sr1(IP(dst="8.8.8.8")/UDP(sport=orig_pkt[UDP].sport)/\
            DNS(rd=1,id=orig_pkt[DNS].id,qd=DNSQR(qname=orig_pkt[DNSQR].qname)),verbose=0)
        respPkt = IP(dst=orig_pkt[IP].src)/UDP(dport=orig_pkt[UDP].sport)/DNS()
        respPkt[DNS] = response[DNS]
        send(respPkt,verbose=0)
        return "Responding: " + respPkt.summary()
 
    def getResponse(pkt):
 
        if (DNS in pkt and pkt[DNS].opcode == 0L and pkt[DNS].ancount == 0 and pkt[IP].src != localIP):
            if "trailers.apple.com" in pkt['DNS Question Record'].qname:
                spfResp = IP(dst=pkt[IP].src)\
                    /UDP(dport=pkt[UDP].sport, sport=53)\
                    /DNS(id=pkt[DNS].id,ancount=1,an=DNSRR(rrname=pkt[DNSQR].qname,rdata=localIP)\
                    /DNSRR(rrname="trailers.apple.com",rdata=localIP))
                send(spfResp,verbose=0)
                return "Spoofed DNS Response Sent"
                
            else:
                #make DNS query, capturing the answer and send the answer
                return forwardDNS(pkt)
 
        else:
            return False
 
    return getResponse
 
sniff(filter=filter,prn=DNS_Responder(DNSServerIP))



# -------------------------------
# Important Fields
# -------------------------------
IP:
    src
    dst
UDP:
    sport
    dport
TCP:
    sport
    dport

# Binding layers
bind_layers (TCP, HTTP, sport=80 )


# for loop
for packet in pkts:
    if (packet.haslayer(ICMP)):
        print "ICMP code: " + str(packet.getlayer(ICMP).code)


