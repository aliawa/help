handle SIG32 nostop

# Usage
# --------
gdb a.out
enter           repeat last command


# Breakpoints and watchpoints
# ------------------------------
b main          set breakpoint at main
b 21 if val==v1 break on line 21 when (val==v1)
wa var1==var2   break when the expression (var1==var2) becomes true
wa var1         break when var1 changes
wa -l           watch the address of the expr. Works even when var is out of scope

# Execute commands when a breakpoint is reached
command 2       # specify commands for breakpoint 2       
printf "x is %d\n",x
cont            # auto continue
end             # end of commands entry


info break      # List all breakpoints
ignore 3 10     # Dont stop at breakpoint nr 3 the next 10 times
dis[able]       # Disable all break points
en[able] 3 4    # Enable breakpts num. 3 and 4
clear foo.c:21  # Delete breakpoint at line nr 21 of foo.c
del[ete] 1      # Delete breakpoint/watchpoint no. 1. If no args: delete all breakpoints

# Formated print
dprintf pan_flow_mgmt.c:3598 "dport: %d\n", fp->key.u.s.ul4info.s.dport

# break on if-condition (conditional breakpoint)
break pan_flow_mgmt.c:3598 if fp->key.u.s.ul4info.s.dport == 16384

# add condition for breakpoint nr 3
condition 3 var==1

# remove condition on breakpoint nr 3
condition 3



# Examin Code:
# ------------
set listsize 20         Print 20 lines (default is 10)
l                       list 
l line
l function
l file:line
l file:function
l *address
edit                    edit the source
shell make              compile



# Debug Location
# ------------
bt                      # show frame stack
frame                   # show info about current frame
frame <frame-number>    # chanage frame to operate on
up, down                # move up down the stack
thread <thread-number>  # change thread to operate on


# Examin Data:
# ------------
inf locals              # print all local variables
info macro expression   # show macro definition (define)

# Print values of expressions.
p $register
p variable
p *address
p *(int *)address
p *(char **)address
p myfunc(p1, p2)        # will actually execute it and return result!
p *a = 123              # will actually change *a value and return 123!
p file::variable
p function::variable
set print elements 0    # print the whole string, not just the first bytes

p *array@len            # print array of length len

x pointerVar            # print memory at address
x/20b pointerVar        # print 20 bytes at address
x/xb <location>         # print byte in hexadecimal
x/s <location>          # print the string starting at location
x/<count><fmt letter><size letter>
fmt letters:  o,x,d,u,t,f,a,i,c,s,z
size letters: b,h,w,g

ptype a                 # print definition of struct
print *(structPointr)   # print struct
set print pretty on     # print structs in readable form

print /t var            # print in binary
print /x var            # print in hex

# Disassembly
disassemble
disassemble file:line


# Run 
# -----------------
r agr1 arg2     run with command line args: arg1, arg2
n               step over
s               step into
finish          step out
c               continue


# Manipulate Data
# ---------------
set var=1       change the value of a variable



info functions -- All function names
info macros -- Show the definitions of all macros at LINESPEC
info scope -- List the variables local to a scope
info sharedlibrary -- Status of loaded shared object libraries
info source -- Information about the current source file
info sources -- Source files in the program
info stack -- Backtrace of the stack
info symbol -- Describe what symbol is at location ADDR
info threads -- Display currently known threads
info variables -- All global and static variable names
info vtbl -- Show the virtual function table for a C++ object

sharedlibrary libnl

show environment [varname] 
set environment varname [=value]
set solib-search-path ~/project/host_tt/snapgear/lib/libnl-1.1/lib




# Examine core file
# --------------------------------------
gdb path/to/the/binary path/to/the/core
.gz core files
first untar them: tar xzvf

on 5060
1. untar on mp (/var/cores)
    tar xzvf all_pktproc_4_8.1.11_1.tar.gz
2. copy to /opt/var.dp1/cores: 
    cp all_pktproc_4_8.1.11_1 /opt/var.dp0/cores
3. telnet to dp1: 
    telent dp1 
    cd /var/cores
4. gdb pan_task all_pktproc_4_8.1.11_1
5. bt


Shared Library
--------------
if shared library is not found look at LD_LIBRARY_PATH


gdb with c source
----------------------------------------------------------------------
On the Dev server:
- Tar up the directories you need
tar -Pczvf ~/tmp/code.tar.gz /home/aawais/pan_git/panos/src/libs/dp/{flow/src,flow/include,detector/src,detector/include,ctd/src,ctd/include}
- copy archive to target:
fw_copy_scripts.sh ~/tmp/code.tar.gz

On the FW device:
- untar on root
cd /
tar -xzvf /tmp/code.tar.gz

# Source path
gdb pan_task <pid>  # attach
set substitute-path /opt/build/panos-devel/slave/main-vm /home/aawais/pan


- Other options
set directories
set substitute-path


TUI GUI
----------------------------------------------------------------------
Command History
Ctrl-P  last command
Ctrl-n  next command
Ctrl-f  forward one character
Ctrl-b  backwards one character
Ctrl-l  refresh
Ctrl-x Ctrl-a   Enter and Exit


GDB init file
----------------------------------------------------------------------
1) Place in home directory, to enable current-dir init file
    ~/.gdbinit
    set auto-load safepath /

2)  ~/project
    break function-name

