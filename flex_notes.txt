Flex is a scanner

input 
    scanner specification,
    suffix: l

output 
    c/c++ source file "lex.yy.c" containing yylex()

non-terminals:
    parser looks for non-terminals by combining tokens
    returned by yylex.


Scanner specification:
    definitions
    %%
    rules
    %%
    user code


generated scanner action:
    yylex(): take input from yyin, parse, return matched token 
    yytext: contains matched token (global variable)
    yyleng: length of matched token 
    yyout:  where the ECHO output goes. Default:stdout, 
            can be reassigend to some other FILE pointer.


Common options
-------------
%option noyywrap nodefault yylineno

noyywrap:  no default main in flex
nodefault: don't generate default rule ". ECHO"
yylineno:  maintain the current line number in a variable called yylineno




Simple example:
--------------
Remove "zap me" from input text file

    scanner.l:
    ---------
    %option noyywrap
    %%
    "zap me"

    main.c:
    ------
    #include "scanner.lex.h"
    main(int argc, char **argv)
    {
        if(argc > 1) {
            if(!(yyin = fopen(argv[1], "r"))) {
                perror(argv[1]);
                return 1;
            }
            yylex();
        }else {
            printf("no input file given\n\n");
            return 1;
        }
        return 0;
    }

    Makefile
    --------
    flextest: scanner.lex.o main.o
    cc -o $@ $^

    scanner.lex.c: 
    flex -o $@ --header-file=scanner.lex.h scanner.l

    clean:
    rm -f scanner.lex.* main.o











f
