# --------------------------------------
# Setting up password less ssh login
# --------------------------------------
# 1:
# Generate private and public key pair: private key is in ~/.ssh/id_rsa
# and public is in ~/.ssh/id_rsa.pub.
# Note: make sure private key file is only readalbe by owner, otherwise it
# will not work.
ssh-keygen  
# if ~/.ssh is not accessable, for example EdgeMarc, the keys can be generated
# in other location.
ssh-keygen -f /var/id_rsa
# Or ~/.ssh can be mounted as tmpfs
mount -t tmpfs tmpfs /.ssh -o size=1M

# 2: 
# Now copy the public key to the server where we wand to do paswordless ssh
cat ~/.ssh/id_rsa.pub | ssh aawais@lin.loc "umask 0077; mkdir -p ~/.ssh; cat >> ~/.ssh/authorized_keys"
# Or use ssh-copy-id (not available everywhere)
ssh-copy-id aawais@lin.ewn

# 3:
# Tell ssh-agent about the newly created private/public keys. if no file is
# give ~/.ssh/id_rsa is assumed.
ssh-add [file ...]

# 4: 
# Do step 2 for every server you want to ssh to.

# 5: 
# ssh will work now. If you want to use a specific identity file (private key)
# use the -i option
ssh -i /var/id_rsa -o StrictHostKeyChecking=no aawais@192.168.1.193





# --------------------------------------
# ssh tunnel
# --------------------------------------

# ssh into 10.1.5.100 with user name "aawais" and then create
# a tunnel to 192.168.9.235 from there, so that port 9000 on 
# "localhost" is connected to port 443 on 192.168.9.235
# The -N option prevents starting a shell on 10.1.5.100
# -T tells the remote command that there is no Pseudo-Terminal
# so don't send prompts etc.
ssh -NT -L 9000:192.168.9.235:443 aawais@10.1.5.100



# ssh to C through B  (A--->B--->C)
# with B=10.10.10.40, C=192.168.30.1, A=host
# Execute on A
ssh -t aawais@10.10.10.40 "ssh root@192.168.30.1"




# --------------------------------------
# ssh debugging public key authentication
# --------------------------------------

# Get more debug info from ssh client
ssh chuyeow@remotehost -v -v -v

# Debugging the server side 
# start server in debug mode and then connect to port 2222
/usr/sbin/sshd -d -p 2222

# Check Authentication log file
tail -f /var/log/auth.log

# Make sure ssh key agent is running
ps aux|grep ssh-agent

# Make sure your private key is added to the ssh key agent
ssh-add -l

# check permissions
stat -c "%a %n" ~ ~/.ssh ~/.ssh/authorized_keys
700 /home/aawais
700 /home/aawais/.ssh
600 /home/aawais/.ssh/authorized_keys

# check sshd config
/etc/ssh/sshd_config




# --------------------------------------
# keep session alive
# --------------------------------------

# Add to ~/.ssh/config
Host *
  ServerAliveInterval 240

# Add to connection string
-o ServerAliveInterval=60



# -----------------------------------------------
# Selectively forward X11 due to securty concerns
# -----------------------------------------------
# Add to ~/.ssh/config
Host capek
     Hostname capek.stanford.edu
     User teichman
     ForwardX11 yes
     ForwardX11Trusted yes

Host *
     ForwardX11 no
     ForwardAgent no


# -----------------------------------------------
# Fix X11 Forwarding in tmux
# -----------------------------------------------
# can be automated: http://alexteichman.com/octo/blog/2014/01/01/x11-forwarding-and-terminal-multiplexers/
# Before attaching to tmux
echo $DISPLAY > ~/.display.txt

# Before running command requiring X11
export DISPLAY=`cat ~/.display.txt`

# Enable X11 forwarding when using sudo
# run on local machine
xhost +


